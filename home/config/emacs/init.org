#+STARTUP: content

* emacs init.el
:PROPERTIES:
:header-args: :results silent
:END:

** install leaf.el
#+begin_src elisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))
    (leaf leaf-keywords
          :ensure t
          :config
          (leaf-keywords-init)))
#+end_src

** builtin configuration
*** preference
#+begin_src elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (keyboard-translate ?\C-h ?\C-?)
#+end_src

*** appearance
#+begin_src elisp
  (column-number-mode +1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (load-theme (if window-system 'modus-operandi 'modus-vivendi))
#+end_src

*** global-minor-modes
#+begin_src elisp
  (electric-pair-mode +1)
  (global-auto-revert-mode +1)
  (global-whitespace-mode +1)
#+end_src

*** customize
#+begin_src elisp
  (custom-set-variables
   '(auto-save-file-name-transforms
     `((".*" ,(locate-user-emacs-file "backup/") t)))
   '(auto-save-list-file-prefix
     `,(locate-user-emacs-file "backup/.saves-"))
   '(backup-directory-alist
     `((".*" . ,(locate-user-emacs-file "backup"))
       (,tramp-file-name-regexp . nil)))
   '(delete-old-versions t)
   '(inhibit-startup-screen t)
   '(org-confirm-babel-evaluate nil)
   '(version-control t)
   )
#+end_src

** packages
*** company-mode
**** company-mode
#+begin_src elisp
  (leaf company
    :ensure t
    :global-minor-mode global-company-mode)
#+end_src

*** editorconfig
**** editorconfig-emacs
#+begin_src elisp
  (leaf editorconfig
    :ensure t
    :global-minor-mode t)
#+end_src

*** joaotavora
**** eglot
#+begin_src elisp
    (leaf eglot
      :ensure t
      :hook
      ((
        c++-mode-hook
        c-mode-hook
        python-mode-hook
        ) . eglot-ensure))
#+end_src

**** yasnippet
#+begin_src elisp
  (leaf yasnippet
    :ensure t
    :global-minor-mode yas-global-mode)
#+end_src

* Local Variables :noexport:
Local Variables:
indent-tabs-mode: nil
End:
